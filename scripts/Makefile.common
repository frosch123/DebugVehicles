.PHONY: all clean distclean mrproper depend docs test bundle bundle_bsrc bundle_bzip bundle_gsrc bundle_src bundle_tar bundle_xsrc bundle_xz bundle_zip bundle_zsrc check addcheck

# We want to disable the default rules. It's not c/c++ anyway
.SUFFIXES:

# Default search paths
VPATH =
VPATH = $(shell echo "`for i in $(shell $(HG) status -m -a -d -c -n | grep -v -E "$(RE_FILES_NO_SRC_BUNDLE)"); do dirname $$i; done`" | sort | uniq)

# For source distributions
ifdef DIST_DIRS
VPATH =
VPATH = $(DIST_DIRS)
endif

# Don't delete intermediate files
.PRECIOUS: %.nfo %.nml %.cnfo %.scm %.png
.SECONDARY: %.nfo %.nml %.cnfo %.scm %.png

.DELETE_ON_ERROR: %.cnfo

################################################################
# Cleaning targets
################################################################

# Clean the source tree
clean::
	$(_V)-rm -rf *.orig *.pre *.bak *~
	$(_V)-rm -rf $(TARGET_FILES) $(REV_FILENAME) md5.check
	$(_V)-rm -rf $(MAKEFILE_DEP)
	$(_V)-rm -rf $(patsubst %.grf,%.src.dep,$(GRF_FILES))
	$(_V)-rm -rf $(patsubst %.grf,%.gfx.dep,$(GRF_FILES))
	$(_V)-rm -rf $(patsubst %.grf,%.md5,$(GRF_FILES))
ifdef NEED_GIMP
	$(_V)-rm -rf $(shell cat $(GRAPHICS_SOURCE_LIST_FILES) | grep "\([pP][cCnN][xXgG]\)" | cut -d\  -f1 | sed "s/\([pP][cCnN][xXgG]\)/scm/")
	$(_V)-rm -rf $(shell cat $(GRAPHICS_SOURCE_LIST_FILES) | grep "\([pP][cCnN][xXgG]\)" | cut -d\  -f1)
endif # NEED_GIMP
	$(_V)-rm -rf $(DIR_NAME)
	$(_V)-rm -rf $(DIR_BASE)*-source
	$(_V)-rm -rf $(DIR_BASE)*-source.tar*
	$(_V)-rm -rf $(DIR_BASE)*-source.zip
	$(_V)-if [ "$(CLEAN_ADD)" ]; then for i in `ls $(CLEAN_ADD) 2> /dev/null`; do [ "$$i" != "" ] && rm $$i; done; fi

# More thoroughly clean the source tree. Should restore the initial
# state of a tarball (except for manual changes to Makefile.local, of
# course).
distclean:: clean
	$(_V)-rm -rf $(SRC_DIR)/$(FILENAME_STUB) $(DIR_NAME_SRC) $(DIR_NAME)
	$(_V)-rm -rf $(DIR_BASE)*nightly*.zip
	$(_V)-rm -rf $(MD5_FILENAME)

# Even more thoroughly clean the tree. Intended to be used on a
# repository checkout. Also cleans files that are in a source tarball,
# but not in the repository.
maintainer-clean mrproper:: distclean
	$(_E) "[MAINTAINER-CLEAN]"
	$(_V)-rm -rf $(MD5_SRC_FILENAME)
	$(_V)-rm -rf Makefile.dist

################################################################
# Testing configuration
################################################################

# Print the output for a number of variables which define this newgrf.
test::
	$(_E) "Make:                         $(MAKE)"
	$(_E) "MD5sum:                       $(MD5SUM)"
	$(_E) "unix2dos:                     $(UNIX2DOS) $(UNIX2DOS_FLAGS)"
	$(_E) "gcc:                          $(CC) $(CC_FLAGS)"
	$(_E) "zip:                          $(ZIP) $(ZIP_FLAGS)"
	$(_E) "bzip:                         $(BZIP) $(BZIP_FLAGS)"
	$(_E) "gimp:                         $(GIMP) $(GIMP_FLAGS)"
	$(_E) "Need / Use gimp:              $(NEED_GIMP) / $(USE_GIMP)"
	$(_E) "OS-Information:               $(OSTYPE)"
	$(_E) "REPO title:                   $(REPO_TITLE)"
	$(_E) "Installation directory:       $(INSTALL_DIR)"
	$(_E) "Documentation directory:      $(DOCDIR)"
	$(_E) "Repository revision:          r$(REPO_REVISION)"
	$(_E) "Current tag:                  $(REPO_TAGS)"
	$(_E) "Current branch string:        $(REPO_BRANCH_STRING)"
	$(_E) "Current version string:       $(REPO_VERSION_STRING)"
	$(_E) "Build targets:                $(TARGET_FILES)"
	$(_E) "Doc files:                    $(DOC_FILES)"
	$(_E) "Bundle filenames       tar:   $(TAR_FILENAME)"
	$(_E) "                       zip:   $(ZIP_FILENAME)"
	$(_E) "                       bzip:  $(BZIP_FILENAME)"
	$(_E) "Dirs (build/src/base):        $(DIR_NAME) / $(DIR_NAME_SRC) / $(DIR_BASE)"
	$(_E) "Dependency check type:        $(DEP_CHECK_TYPE)"
	$(_E) "Excluded from source bundle:  $(RE_FILES_NO_SRC_BUNDLE)"
	$(_E) "Repository dirs (= VPATH):    $(VPATH)"
# uncomment the following two lines in order to get a list of all files which are considered to be part of the repo
# and the sub-list of those which are considered for the source bundle (for bundle_src)
#	$(_E) "Bundled files:                $(BUNDLE_FILES)"


################################################################
# Documentation targets
################################################################

%.txt: %.ptxt $(REV_FILENAME) $(MD5_FILENAME)
	$(_E) "[TXT] $@"
	$(_V) cat $< \
		| sed -e "s/$(REPO_TITLE_DUMMY)/$(REPO_TITLE)/" \
		| sed -e "s/$(GRF_ID_DUMMY)/$(GRF_ID)/" \
		| sed -e "s/$(REPO_REVISION_DUMMY)/$(REPO_REVISION)/" \
		| sed -e "s/$(OUTPUT_FILENAME_DUMMY)/$(OUTPUT_FILENAME)/" \
		| sed -e "s/$(GRF_MD5SUM_DUMMY)/$(shell cat $(MD5_FILENAME))/" \
		> $@
	$(_V) [ -z "$(UNIX2DOS)" ] || $(UNIX2DOS) $(UNIX2DOS_FLAGS) $@

################################################################
# Dependency check targets
################################################################

Makefile.dep: $(GRAPHICS_SOURCE_LIST_FILES) Makefile Makefile.config $(SCRIPT_DIR)/Makefile.common $(SCRIPT_DIR)/Makefile.def $(SCRIPT_DIR)/Makefile.bundles
	$(_E) "[DEP] $@"
ifdef NEED_GIMP
	$(_V) for i in `cat $(GRAPHICS_SOURCE_LIST_FILES) | grep "\([pP][cCnN][xXgG]\)" | cut -d\  -f1 | sed "s/\([pP][cCnN][xXgG]\)/scm/"`; do echo "$$i: $(GRAPHICS_SOURCE_LIST_FILES)" > $@; done
	$(_V) cat $(GRAPHICS_SOURCE_LIST_FILES) | grep "\([pP][cCnN][xXgG]\)" | sed "s/[ ] */ /g" | cut -d\  -f1-2 | sed "s/ /: /g" >> $@
else # NEED_GIMP
	$(_V) touch $@
endif # NEED_GIMP

# Create the dependencies. Allow project types to define their own
$(REV_FILENAME):
	$(_V) [ -f $@ ] && [ "`cat $@`" = "$(REPO_VERSION_STRING)" ] || echo $(REPO_VERSION_STRING) > $@

# we have to write the version here w/o depending on the REV_FILENAME:
depend::
	$(_V) [ -f $(REV_FILENAME) ] && [ "`cat $(REV_FILENAME)`" = "$(REPO_VERSION_STRING)" ] || echo "$(REPO_VERSION_STRING)" > $(REV_FILENAME)

Makefile.local:;

################################################################
# Targets related to creation of graphics files
################################################################

# Dependency on source list file via dep check
ifdef NEED_GIMP
%.scm: $(SCRIPT_DIR)/gimpscript $(SCRIPT_DIR)/gimp.sed
	$(_E) "[GEN] $@"
	$(_V) cat $(SCRIPT_DIR)/gimpscript > $@
	$(_V) cat $(GRAPHICS_SOURCE_LIST_FILES) | grep $(patsubst %.scm,%.png,$@) | sed -f $(SCRIPT_DIR)/gimp.sed >> $@
	$(_V) echo "(gimp-quit 0)" >> $@

# create the png file. And make sure it's re-created even when present in the repo
%.png: %.scm
	$(_E) "[GIMP] $@"
ifdef USE_GIMP
	$(_V) $(GIMP) $(GIMP_FLAGS) $< >/dev/null
	$(_V) touch $@
else # USE_GIMP
	$(_E) "... Gimp not found. Graphis cannot be created. Terminating."
	$(_V) false
endif # USE_GIMP
endif # NEED_GIMP

################################################################
# Miscelaneous
################################################################

addcheck:
	$(_E) "[ADDCHECK] for missing repo files:"
	$(_V) for i in `$(HG) status -u -i -n | grep -E '($(FILE_SRC_RE)|grf)$$'`; do hg st $$i `for j in $(FILE_SRC_EXTENSIONS) $(FILE_INC_EXTENSIONS); do cat $$i |  grep -v '^//' | grep -o "[a-zA-Z0-9/_.-]\+\.$$j" | sort | uniq; done`; done | sort | uniq  | grep "^?" && echo "Missing dependencies!" || echo "All is fine"
